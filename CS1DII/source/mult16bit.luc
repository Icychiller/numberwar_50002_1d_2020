/*
   Disclaimer: This Multiplier Process follows the same process provided in SW3: ALU.
*/

module mult16bit (
    input a[16],            // a input signal    
    input b[16],            // b input signal
    output out[16]          // Final output signal
  ) {
  var i,j;                  // arbitrary variable in for-loops
  sig andgates[16][16];     // collection of all AND gate signals (And a little extra, just for simplicity)
  fulladder adder[15][15];  // collection of all Adders needed for Cascading Ripple Carry. (And a little extra, just for simplicity)
  always {
  
    //Process all AND gates for partial sums
    for(i=0;i<16;i++){
      for(j=0;j<16;j++){
        andgates[i][j]=a[j]&b[i];
      }
    }
    
    // Process all adder connections
    // input resulting AND gates
    // AND gate for b[0] is summed to b[1], therefore isolated.
    adder.a[0]=andgates[0][15:1];
    
    // All other AND gates are assigned to adder.b inputs
    for(i=0;i<15;i++){
      adder.b[i]=andgates[i+1][14:0];    // Note: MSBs that aren't assigned are ignored later.
    }
    
    // Cascading Adder outputs are assigned to remaining adder.a inputs (pseudo right shift by ignoring LSB)
    for(i=0;i<14;i++){
      adder.a[i+1]=adder.s[i][14:1];
    }
    
    // Ripple Carry Assignment for each cascade
    for(i=0;i<15;i++){
      adder.cin[i][0]=0;
      adder.cin[i][14:1]=adder.cout[i][13:0];
    }
    
    // Assignment of Final Output
    out[0]=andgates[0][0];
    for(i=1;i<16;i++){
      out[i]=adder.s[i-1][0];
    }
  }
}

